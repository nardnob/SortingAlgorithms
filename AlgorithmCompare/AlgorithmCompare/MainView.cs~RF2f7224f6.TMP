using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace AlgorithmCompare
{
    public partial class MainView : Form
    {
        private Random _rand = new Random();
        private List<int> _unsortedNums = new List<int>();
        private List<int> _sortedNums = new List<int>();

        private const int DEFAULT_ITEMS = 1000;
        private const int DEFAULT_BEGIN_RANGE = 0;
        private const int DEFAULT_END_RANGE = 1000;

        private Mode _modeValue;
        private Mode _mode
        {
            get
            {
                return _modeValue;
            }
            set
            {
                switch(value)
                {
                case Mode.Loading:
                    tstxtItems.Enabled = false;
                    tstxtBeginRange.Enabled = false;
                    tstxtEndRange.Enabled = false;
                    tsbtnGetList.Enabled = false;

                    break;

                case Mode.Ready:
                    tstxtItems.Enabled = true;
                    tstxtBeginRange.Enabled = true;
                    tstxtEndRange.Enabled = true;
                    tsbtnGetList.Enabled = true;

                    break;
                }

                _modeValue = value;
            }
        }

        private enum Mode
        {
            Ready,
            Loading
        }

        public MainView()
        {
            InitializeComponent();
        }

        private async void MainView_Load(object sender, EventArgs e)
        {
            tstxtItems.Text = DEFAULT_ITEMS.ToString();
            tstxtBeginRange.Text = DEFAULT_BEGIN_RANGE.ToString();
            tstxtEndRange.Text = DEFAULT_END_RANGE.ToString();

            try
            {
                await Task.WhenAll(GetAndPopulateList(DEFAULT_ITEMS, DEFAULT_BEGIN_RANGE, DEFAULT_END_RANGE));
            }
            catch(Exception ex)
            {
                MessageBox.Show("Something happened.. Abandon ship!", "Exception");
                return;
            }
        }

        private async Task GetAndPopulateList(int items, int beginRange, int endRange)
        {
            _mode = Mode.Loading;

            var sb = await Task.Factory.StartNew(f => GetList(items, beginRange, endRange), null);

            txtUnsortedNums.Text = sb.ToString();
            txtSortedNums.Text = String.Empty;

            _mode = Mode.Ready;
        }

        private async Task<StringBuilder> GetList(int items, int beginRange, int endRange)
        {
            var sb = new StringBuilder();
            _unsortedNums.Clear();


            for(int i = 0; i < items; i++)
            {
                var rand = _rand.Next(beginRange, endRange + 1);

                _unsortedNums.Add(rand);
                sb.Append(rand.ToString() + "; ");
            }

            return sb;
        }

        private async void tsbtnGetList_Click(object sender, EventArgs e)
        {
            int items, beginRange, endRange;

            try
            {
                items = Convert.ToInt32(tstxtItems.Text);
            }
            catch(FormatException ex)
            {
                MessageBox.Show("Invalid number of items entered.", "Invalid Input");
                return;
            }
            catch(Exception ex)
            {
                MessageBox.Show("Something happened.. Abandon ship!", "Exception");
                return;
            }

            try
            {
                beginRange = Convert.ToInt32(tstxtBeginRange.Text);
            }
            catch(FormatException ex)
            {
                MessageBox.Show("Invalid begin range entered.", "Invalid Input");
                return;
            }
            catch(Exception ex)
            {
                MessageBox.Show("Something happened.. Abandon ship!", "Exception");
                return;
            }

            try
            {
                endRange = Convert.ToInt32(tstxtEndRange.Text);
            }
            catch(FormatException ex)
            {
                MessageBox.Show("Invalid end range entered.", "Invalid Input");
                return;
            }
            catch(Exception ex)
            {
                MessageBox.Show("Something happened.. Abandon ship!", "Exception");
                return;
            }

            try
            {
                await Task.WhenAll(GetAndPopulateList(items, beginRange, endRange));
            }
            catch(Exception ex)
            {
                MessageBox.Show("Something happened.. Abandon ship!", "Exception");
                return;
            }
        }
    }
}
